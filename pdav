#!/usr/bin/env python3
import pulsectl
import concurrent.futures
import signal
import sys
import os
import time
import hashlib
import json

__VERSION__  = "0.0.3"

def get_save_file():
    try:
        if os.path.exists(os.environ["PDAV_CONFIG_FILE"]):
            return os.environ["PDAV_CONFIG_FILE"]
        else:
            print(f"file supplied in 'PDAV_CONFIG_FILE' ({os.environ["PDAV_CONFIG_FILE"]}) does not exist")
    except KeyError:
        pass
    filename = "pdav-config.json"
    if os.path.exists(os.path.expanduser("~/.config")) == True:
        return os.path.join(os.path.expanduser("~/.config"), filename) 

def ident(proplist):
        ident = hashlib.shake_128()
        ident.update(proplist["application.name"].encode("utf-8"))
        ident.update(proplist["application.process.binary"].encode("utf-8"))
        return ident.hexdigest(16)

def run():    
    global SAVE_FILE
    pa_client = pulsectl.Pulse("per-device-application-volume")
    default_sink_input = pa_client.server_info().default_sink_name
    save = {
        "applications" : {},
        "last_default_sink" : default_sink_input
    }
    if os.path.exists(SAVE_FILE) == True:
        with open(SAVE_FILE, "r", encoding="utf8") as f:
            try:
                save = json.loads(f.read())
            except json.JSONDecodeError:
                print(f"cant parse json save file '{SAVE_FILE}'")
            
    for sink in pa_client.sink_input_list():
        try:
            vol = save["applications"][ident(sink.proplist)]["volumes"][default_sink_input]
            if pa_client.volume_get_all_chans(sink) != vol and save["last_default_sink"] != default_sink_input:
                pa_client.volume_set_all_chans(sink, vol)
                print(f"volume for application '{sink.proplist["application.name"]}' on device '{default_sink_input}' set to {vol*100}%!")
        except KeyError:
            print(f"no volume for application '{sink.proplist["application.name"]}' on device '{default_sink_input}' set!")
    
    for sink in pa_client.sink_input_list():
        vol = pa_client.volume_get_all_chans(sink)
        try:
            save["applications"][ident(sink.proplist)]["volumes"][default_sink_input] = vol
            save["applications"][ident(sink.proplist)]["application.name"] = sink.proplist["application.name"]
            save["applications"][ident(sink.proplist)]["application.process.binary"] = sink.proplist["application.process.binary"]
        except KeyError:
            # no data for application
            save["applications"][ident(sink.proplist)] = {
                "volumes": {default_sink_input : vol},
                "application.name" : sink.proplist["application.name"],
                "application.process.binary" : sink.proplist["application.process.binary"]
                }
    
    save["last_default_sink"] = default_sink_input
    with open(SAVE_FILE, "w", encoding="utf8") as f:
        f.write(json.dumps(save, indent=4, ensure_ascii=False))
    pa_client.close()

def signal_handler(sig, frame):
    sys.exit(0)

def main():
    signal.signal(signal.SIGINT, signal_handler)
    signal.signal(signal.SIGTERM, signal_handler)

    with pulsectl.Pulse("per-device-application-volume_listener") as pulse:
        def event_handler(ev):
            with concurrent.futures.ProcessPoolExecutor() as executor:
                executor.submit(run())
            raise pulsectl.PulseLoopStop

        pulse.event_mask_set('sink_input')
        pulse.event_callback_set(event_handler)
        while True:
            pulse.event_listen()
            time.sleep(0.1)

if __name__ == "__main__":
    SAVE_FILE = get_save_file()
    print(f"PDAV version {__VERSION__}")
    print("this tool is in an very early version, please report any issues you encounter to \n https://github.com/shinrax2/per-device-application-volume")
    print(f"save file: {os.path.abspath(SAVE_FILE)}")
    main()
