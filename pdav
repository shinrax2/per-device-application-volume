#!/usr/bin/env python3

# stdlib imports
import concurrent.futures
import signal
import sys
import os
import time
import hashlib
import json
import copy
import shutil
import subprocess

# pip package imports
import pulsectl # pip:pulsectl

__VERSION__  = "0.2.0"

def get_save_file():
    try:
        if os.path.exists(os.environ["PDAV_CONFIG_FILE"]):
            print(f"[PDAV] using config file 'PDAV_CONFIG_FILE' ({os.environ["PDAV_CONFIG_FILE"]})")
            return os.environ["PDAV_CONFIG_FILE"]
        else:
            print(f"[PDAV] file supplied in 'PDAV_CONFIG_FILE' ({os.environ["PDAV_CONFIG_FILE"]}) does not exist")
    except KeyError:
        pass
    filename = "pdav-config.json"
    if os.path.exists(os.path.expanduser("~/.config")) == True:
        return os.path.join(os.path.expanduser("~/.config"), filename)

def get_quirks_file():
    try:
        if os.path.exists(os.environ["PDAV_QUIRKS_FILE"]):
            print(f"[PDAV] using QUIRKS file 'PDAV_QUIRKS_FILE' ({os.environ["PDAV_QUIRKS_FILE"]})")
            return os.environ["PDAV_QUIRKS_FILE"]
        else:
            print(f"[PDAV] file supplied in 'PDAV_QUIRKS_FILE' ({os.environ["PDAV_QUIRKS_FILE"]}) does not exist")
    except KeyError:
        pass
    filename = "quirks.json"
    # search order: /usr/share/pdav/, ~/.local/share/pdav/, ./
    if os.path.exists(os.path.join("/usr/share/pdav/", filename)) == True:
        return os.path.join("/usr/share/pdav/", filename)
    elif os.path.exists(os.path.join(os.path.expanduser("~/.local/share/pdav/"), filename)) == True:
        return os.path.join(os.path.expanduser("~/.local/share/pdav/"), filename)
    return filename


def apply_quirks(proplist):
    quirks_file = get_quirks_file()
    quirks = []
    clone_prop = copy.deepcopy(proplist)
    with open(quirks_file, "r", encoding="utf8") as f:
        try:
                quirks = json.loads(f.read())
        except json.JSONDecodeError:
            print(f"[PDAV] cant parse quirks file '{quirks_file}'")
    for quirk in quirks:
        execute = False
        cond_count = 1
        # check conditions
        for cond in quirk["conditions"]:
            met = False

            if cond["type"] == "contains":
                try:
                    if cond["data"] in proplist[cond["target"]]:
                        met = True
                except KeyError:
                    pass
            elif cond["type"] == "match":
                try:
                    if cond["data"] == proplist[cond["target"]]:
                        met = True
                except KeyError:
                    pass

            if met == True:
                if quirk["condition_type"].lower() == "and":
                    cond_count += 1
                    if cond_count == len(quirk["conditions"]):
                        execute = True
                        break
                elif quirk["condition_type"].lower() == "or":
                    execute = True
                    break
        if execute == True:
            for exe in quirk["execute"]:
                if exe["type"] == "replace":
                    clone_prop[exe["target"]] = exe["data"]
    
    return clone_prop

def ident(proplist):
        ident = hashlib.shake_128()
        ident.update(proplist["application.name"].encode("utf-8"))
        ident.update(proplist["application.process.binary"].encode("utf-8"))
        return ident.hexdigest(16)

def run():
    pa_client = pulsectl.Pulse("per-device-application-volume")
    default_sink_input = pa_client.server_info().default_sink_name

    # get save file location
    SAVE_FILE = get_save_file()

    # default empty save & config
    save = {
        "applications" : {},
        "ignores" : {
            "devies" : [],
            "applications": {}
        },
        "last_default_sink" : default_sink_input
    }

    # parse pdav-config.json if possible and overwrite default save
    if os.path.exists(SAVE_FILE) == True:
        with open(SAVE_FILE, "r", encoding="utf8") as f:
            try:
                save = json.loads(f.read())
            except json.JSONDecodeError:
                print(f"[PDAV] cant parse json save file '{SAVE_FILE}'")
    try:
        save["ignores"]
    except KeyError:
        save["ignores"] = {}

    # apply volume if default sink changed and application volume =! set volume 
    for sink in pa_client.sink_input_list():
        proplist = apply_quirks(sink.proplist)
        k = ident(proplist)
        skip = False
        # check for application ignores
        try:
            if k in save["ignores"]["applications"].keys():
                skip = True
        except KeyError:
            save["ignores"]["applications"] = {}
        if skip == False:
            try:
                vol = save["applications"][k]["volumes"][default_sink_input]
                if pa_client.volume_get_all_chans(sink) != vol and save["last_default_sink"] != default_sink_input:
                    pa_client.volume_set_all_chans(sink, vol)
                    print(f"[PDAV] volume for application '{proplist["application.name"]}' on device '{default_sink_input}' set to {vol*100}%!")
            except KeyError:
                print(f"[PDAV] no volume for application '{proplist["application.name"]}' on device '{default_sink_input}' set!")
    # check for device ignores
    try:
        if default_sink_input in save["ignores"]["devices"]:
            return
    except KeyError:
        save["ignores"]["devices"] = []
    
    # read application volume on current default sink and add it to save
    for sink in pa_client.sink_input_list():
        proplist = apply_quirks(sink.proplist)
        k = ident(proplist)
        skip = False
        # check for application ignores
        try:
            if k in save["ignores"]["applications"].keys():
                skip = True
        except KeyError:
            save["ignores"]["applications"] = {}
        if skip == False:
            vol = pa_client.volume_get_all_chans(sink)
            try:
                save["applications"][k]["volumes"][default_sink_input] = vol
                save["applications"][k]["application.name"] = proplist["application.name"]
                save["applications"][k]["application.process.binary"] = proplist["application.process.binary"]
            except KeyError:
                # no data for application
                save["applications"][k] = {
                    "volumes": {default_sink_input : vol},
                    "application.name" : proplist["application.name"],
                    "application.process.binary" : proplist["application.process.binary"]
                    }

    save["last_default_sink"] = default_sink_input

    # write save to disk
    with open(SAVE_FILE, "w", encoding="utf8") as f:
                f.write(json.dumps(save, indent=4, ensure_ascii=False))

    pa_client.close()

def signal_handler(sig, frame):
    sys.exit(0)

def event_handler(ev):
    with concurrent.futures.ProcessPoolExecutor() as executor:
        executor.submit(run())
    raise pulsectl.PulseLoopStop

def main():
    # setup signal handlers
    signal.signal(signal.SIGINT, signal_handler)
    signal.signal(signal.SIGTERM, signal_handler)

    # print header
    print(f"[PDAV] PDAV version {__VERSION__}")
    print("[PDAV] this tool is in an very early version, please report any issues you encounter to https://github.com/shinrax2/per-device-application-volume")
    print(f"[PDAV] save file: {os.path.abspath(get_save_file())}")
    print(f"[PDAV] quirks file: {os.path.abspath(get_quirks_file())}")
    if os.path.exists(os.path.join(os.path.dirname(__file__), ".git")) == True and shutil.which("git") is not None:
        gitver = subprocess.Popen(["bash", "-c", "git describe --long --tags"], stdout=subprocess.PIPE).communicate()[0].decode("utf8")
        print(f"[PDAV] found git version: {gitver}")

    with pulsectl.Pulse("per-device-application-volume_listener") as pulse:
        # setup pulsectl event settings
        pulse.event_mask_set('sink_input')
        pulse.event_callback_set(event_handler)
        # run main loop
        while True:
            pulse.event_listen()
            time.sleep(0.1)

if __name__ == "__main__":
    main()
